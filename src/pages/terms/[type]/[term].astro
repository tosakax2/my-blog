---
export interface Params {
  type: 'categories' | 'tags';
  term: string;
}

import BaseLayout from "../../../layouts/BaseLayout.astro";
import PostList from "../../../components/PostList.astro";
import { hashTitle } from "../../../utils/hashTitle";

export async function getStaticPaths() {
  const postFiles = import.meta.glob('../../../blog/*.{md,mdx}', { eager: true });
  const categorySet = new Set<string>();
  const tagSet = new Set<string>();

  for (const path in postFiles) {
    const fm = (postFiles[path] as any).frontmatter;
    fm.categories?.forEach((c: string) => categorySet.add(c));
    fm.tags?.forEach((t: string)       => tagSet.add(t));
  }

  return [
    ...Array.from(categorySet).map(category => ({
      params: { type: 'categories', term: category },
    })),
    ...Array.from(tagSet).map(tag => ({
      params: { type: 'tags',       term: tag },
    })),
  ];
}

const { type, term } = Astro.params;
const decoded = decodeURIComponent(term);

const postFiles = import.meta.glob('../../../blog/*.{md,mdx}', { eager: true });
const posts = Object.entries(postFiles).map(([_, mod]: any) => {
  const fm = mod.frontmatter;
  const date = fm.date.replace(/-/g, '').slice(0, 8);
  const hash = hashTitle(fm.title);
  const slug = fm.slug || `${date}-${hash}`;
  return { frontmatter: fm, url: `/blog/${slug}` };
});

const key      = type === 'categories' ? 'categories' : 'tags';
const filtered = posts.filter(p => p.frontmatter[key]?.includes(decoded));
filtered.sort((a, b) => b.frontmatter.date.localeCompare(a.frontmatter.date));

const label     = type === 'categories' ? 'Category' : 'Tag';
const pageTitle = `${label}: ${decoded}`;
---
<BaseLayout pageTitle={pageTitle}>
  <div class="max-w-3xl mx-auto px-4 sm:px-8 py-16 w-full">
    <h1 data-scramble class="text-center text-3xl font-bold mb-16">{pageTitle}</h1>
    {filtered.length > 0 ? <PostList posts={filtered} /> : <p>記事が見つかりませんでした。</p>}
  </div>
</BaseLayout>
